diff --git a/dist/howler.js b/dist/howler.js
index bb5a463ec7e0724df30d2ecc539612396ef7297c..6275080e56225d0a82e665aae99b9a3d55bf4f2d 100644
--- a/dist/howler.js
+++ b/dist/howler.js
@@ -324,7 +324,17 @@
       // Call this method on touch start to create and play a buffer,
       // then check if the audio actually played to determine if
       // audio has now been unlocked on iOS, Android, etc.
+      var locked = false;
       var unlock = function(e) {
+        if (locked) {
+          return;
+        }
+
+        locked = true;
+        setTimeout(() => {
+          locked = false;
+        }, 300);
+        
         // Create a pool of unlocked HTML5 Audio objects that can
         // be used for playing sounds without user interaction. HTML5
         // Audio objects must be individually unlocked, as opposed
@@ -427,14 +437,6 @@
         return self._html5AudioPool.pop();
       }
 
-      //.Check if the audio is locked and throw a warning.
-      var testPlay = new Audio().play();
-      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {
-        testPlay.catch(function() {
-          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');
-        });
-      }
-
       return new Audio();
     },
 
@@ -889,6 +891,7 @@
           self._playLock = true;
 
           // Wait for the audio context to resume before playing.
+          self.off('resume');
           self.once('resume', playWebAudio);
 
           // Cancel the end timer.
@@ -954,14 +957,15 @@
             if (sprite !== '__default' || sound._loop) {
               self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
             } else {
-              self._endTimers[sound._id] = function() {
+              const fn = function() {
                 // Fire ended on this audio node.
                 self._ended(sound);
 
                 // Clear this listener.
-                node.removeEventListener('ended', self._endTimers[sound._id], false);
+                node.removeEventListener('ended', fn, false);
               };
-              node.addEventListener('ended', self._endTimers[sound._id], false);
+              self._endTimers[sound._id] = fn;
+              node.addEventListener('ended', fn, false);
             }
           } catch (err) {
             self._emit('playerror', sound._id, err);
