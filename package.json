{
  "name": "@deities/athena-crisis",
  "version": "1.0.0",
  "private": true,
  "repository": {
    "type": "git",
    "url": "git://github.com/nkzw-tech/athena-crisis.git"
  },
  "author": "Christoph Nakazawa <christoph.pojer@gmail.com>",
  "type": "module",
  "scripts": {
    "ac": "node --no-warnings --experimental-specifier-resolution=node --loader ts-node/esm ./artemis/scripts/ac.tsx",
    "build-assets:force": "rm -rf node_modules **/node_modules && pnpm enable-canvas && pnpm install && pnpm dev:setup && pnpm build-assets && pnpm disable-canvas",
    "build-assets": "node --no-warnings --experimental-specifier-resolution=node --loader ts-node/esm --loader ./scripts/variant-loader.js --loader ./scripts/image-loader.js ./scripts/build-assets.tsx",
    "build:client": "rm -rf ./dist/ares && pnpm fbt && pnpm vite build --outDir ../dist/ares -c ./ares/vite.config.ts ./ares/",
    "build:demo": "export IS_DEMO=1 && rm -rf ./dist/ares-demo && pnpm fbt && pnpm vite build --outDir ../dist/ares-demo -c ./ares/vite.config.ts ./ares/",
    "build:docker-server": "RELEASE_ID=$(git rev-parse --short HEAD) docker buildx build --load -f Dockerfile --platform=linux/amd64 --tag athena-crisis --build-arg RELEASE_ID=$RELEASE_ID .",
    "build:docs": "cd docs && pnpm build --outDir ../../dist/deimos/open-source",
    "build:offline": "rm -rf ./dist/offline && pnpm vite build --outDir ../dist/offline -c ./offline/vite.config.ts ./offline; rm -rf mobile/dist/offline; mkdir mobile/dist; cp -R dist/offline mobile/dist/offline; rm -rf electron/offline; cp -R dist/offline electron/offline",
    "build:server": "./build-server",
    "build:splash": "rm -rf ./dist/deimos && pnpm vite build --outDir ../dist/deimos -c ./deimos/vite.config.ts ./deimos/ && pnpm build:docs",
    "build:steam-i18n": "rm -rf ./dist/steami18n && node --no-warnings --experimental-specifier-resolution=node --loader ts-node/esm ./ares/scripts/translateStorepage.js",
    "build:twitch": "rm -rf ./dist/twitch && pnpm vite build --outDir ../dist/twitch -c ./twitch/vite.config.ts ./twitch/",
    "codegen": "node --no-warnings --experimental-specifier-resolution=node --loader ts-node/esm ./codegen/generate-all.tsx",
    "dev": "cd docs && pnpm dev",
    "dev:prisma-generate": "if [ -d artemis/prisma ]; then pnpm prisma generate; else exit 0; fi",
    "dev:setup": "pnpm dev:prisma-generate && pnpm relay && pnpm codegen && pnpm fbt",
    "dev:update-deps": "rm -rf pnpm-lock.yaml node_modules/ **/node_modules && pnpm dev:setup",
    "disable-canvas": "jq '.pnpm |= (if has(\"onlyBuiltDependencies\") then .neverBuiltDependencies = .onlyBuiltDependencies | del(.onlyBuiltDependencies) else . end)' package.json > package.tmp.json && mv package.tmp.json package.json && git restore pnpm-lock.yaml",
    "enable-canvas": "jq '.pnpm |= (if has(\"neverBuiltDependencies\") then .onlyBuiltDependencies = .neverBuiltDependencies | del(.neverBuiltDependencies) else . end)' package.json > package.tmp.json && mv package.tmp.json package.json && canvasKey=$(yq e '.packages | keys' pnpm-lock.yaml | grep 'canvas@3\\.' | head -n 1 | sed 's/- //') && yq e \".packages[\\\"$canvasKey\\\"].requiresBuild = true\" -i pnpm-lock.yaml && yq e 'del(.neverBuiltDependencies)' -i pnpm-lock.yaml",
    "fbt": "cd ares && if [ -d src ]; then pnpm fbt; else exit 0; fi",
    "format": "prettier --write .",
    "i18n:download": "crowdin download && (cd ares && pnpm fbt:translate)",
    "i18n:upload": "(cd ares && pnpm fbt:manifest && pnpm fbt:collect) && crowdin upload sources",
    "lint:format": "prettier --cache --check .",
    "lint": "eslint --cache .",
    "preinstall": "command -v git >/dev/null 2>&1 && git config core.hooksPath git-hooks || true",
    "prisma": "cd artemis && pnpm prisma",
    "relay": "cd ares && if [ -d src ]; then pnpm relay-compiler; else exit 0; fi",
    "test:ci": "pnpm npm-run-all --parallel tsc:check lint lint:format vitest:run-ci",
    "test": "npm-run-all --parallel tsc:check lint lint:format relay vitest:run",
    "tsc:check": "tsc",
    "vitest:run-ci": "vitest run",
    "vitest:run": "CPUS=$(if uname -s | grep -q Darwin; then sysctl -n hw.ncpu; else nproc --all; fi); export VITEST_MAX_THREADS=$(($CPUS - 2)); export VITEST_MIN_THREADS=$(($CPUS - 2)); vitest run"
  },
  "nodemonConfig": {
    "watch": [
      "apollo/",
      "artemis/",
      "athena/",
      "dionysus/",
      "hephaestus/",
      "hermes/",
      "i18n/",
      "zeus/"
    ]
  },
  "devDependencies": {
    "@babel/plugin-syntax-typescript": "^7.25.9",
    "@deities/eslint-plugin": "workspace:*",
    "@ianvs/prettier-plugin-sort-imports": "^4.4.1",
    "@nkzw/babel-preset-fbtee": "^0.2.0",
    "@nkzw/eslint-config": "^2.0.0",
    "@nkzw/eslint-plugin-fbtee": "^0.2.1",
    "@styled/typescript-styled-plugin": "^1.0.1",
    "@swc/core": "^1.11.8",
    "@types/node": "^22.13.9",
    "@vitejs/plugin-react": "^4.3.4",
    "babel-plugin-react-compiler": "19.0.0-beta-e1e972c-20250221",
    "chalk": "^5.4.1",
    "dotenv": "^16.4.7",
    "eslint": "^9.22.0",
    "eslint-plugin-react-compiler": "19.0.0-beta-e1e972c-20250221",
    "eslint-plugin-workspaces": "^0.10.1",
    "nodemon": "^3.1.9",
    "npm-run-all2": "^7.0.2",
    "prettier": "4.0.0-alpha.12",
    "prettier-plugin-packagejson": "^2.5.10",
    "react-refresh": "^0.16.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.2",
    "vite": "^6.2.1",
    "vitest": "^3.0.8"
  },
  "engines": {
    "node": ">=20.0.0",
    "pnpm": ">=9.0.1"
  },
  "pnpm": {
    "peerDependencyRules": {
      "allowAny": [
        "@aws-sdk/client-sso-oidc",
        "react",
        "react-dom",
        "utf-8-validate"
      ]
    },
    "neverBuiltDependencies": [
      "canvas"
    ],
    "overrides": {
      "react@^18.0.0": "19.0.0-rc.1",
      "rollup@^2.0.0": "^4.16.4"
    },
    "patchedDependencies": {
      "cordova-plugin-purchase": "patches/cordova-plugin-purchase.patch",
      "eslint-plugin-import": "patches/eslint-plugin-import.patch",
      "graphql-helix@1.13.0": "patches/graphql-helix@1.13.0.patch",
      "howler@2.2.4": "patches/howler@2.2.4.patch",
      "jest-image-snapshot": "patches/jest-image-snapshot.patch",
      "require-in-the-middle": "patches/require-in-the-middle.patch",
      "resend": "patches/resend.patch",
      "typescript": "patches/typescript.patch"
    }
  }
}
